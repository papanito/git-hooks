#!/usr/bin/env bash
set -eo pipefail
set -o errexit
set -o errtrace
shopt -s inherit_errexit

if [[ -f "./.git/hooks/pre-commit" ]]; then
    sh ./.git/hooks/pre-commit
fi

# @description: check if README has ben updated and the add it to the commit
function addReadme() {
    changedReadme=$(git status --porcelain | awk 'match($1, "M"){ if ($2 ~ /.*.md/) print $2}')
    if [ ! -z $changedReadme ]; then
        echo "[Info] Adding $changedReadme to commit"
        git add $changedReadme
    fi
}

# @description: generates the tf-doc incl. submodules if applicable
function tfdocu() {
    # terraform-docs will locate any available configuration file without needing to explicitly pass the --config flag.
    if [ -z "$TF_DOCS_CONF" ]; then
        if terraform-docs $1 ; then
            addReadme $1
        fi
    else
        if terraform-docs -c $TF_DOCS_CONF $1; then
            addReadme $1
        fi
    fi
}

# @description: Check for secrets in current state and block commit, for secrets in commits only report them
function run_gitleaks() {
    ## skip setp if you add an empty file .skip_gitleaks
    if [[ -f "./.skip_gitleaks" ]]; then
        return
    fi
    if which gitleaks &>/dev/null ; then
        # The protect command is used to scan uncommitted changes in a git repo You can set the --staged flag to check for changes in commits that have been git added
        gitleaks protect --staged
    fi
}

stagedFiles=$(git diff --cached --name-only | awk '{print $0}')
# run terraform stuff if applicable
filepath=()
for filename in $stagedFiles; do
    if [ "${filename##*.}" == "tf" ]; then
        filepath+=("$(dirname $filename)")
    fi
done

for dir in $(echo "${filepath[@]}" | tr ' ' '\n' | sort -u ); do
    # we can disable docs creation
    if [ -z "$TF_DOCS_DISABLE" ]; then
        echo "[Info] Running terraform-docs for '$dir'"
        tfdocu $dir
    fi
    # "skeletons" will not be checked
    if [[ "$(pwd)" == *"skeleton"* ]]; then
        echo "[Info] This looks like a 'skeleton', so please manually run `terraform fmt`"
    else
        echo "[Info] Running terraform fmt"
        terraform fmt -recursive
    fi
done

# always run gitleaks
run_gitleaks