#!/usr/bin/env bash
set -eo pipefail
set -o errexit
set -o errtrace
shopt -s inherit_errexit

if [[ -f "./.git/hooks/pre-commit" ]]; then
    sh ./.git/hooks/pre-commit
fi

function tfdocu_do() {
    # terraform-docs will locate any available configuration file without needing to explicitly pass the --config flag.
    if [ -z "$TF_DOCS_CONF" ]; then
        if terraform-docs $1 ; then
            git add "$1/README.md"
        fi
    else
        if terraform-docs -c $TF_DOCS_CONF $1; then
            git add "$1/README.md"
        fi
    fi
}

# @description: iterates over all modules and triggers creation of tf docu
function tfdocu() {
    for dir in $(find . -maxdepth 1 -type d -not -path '*/.*' -not -path '.'); do
        echo "[Info] Running terraform-docs for '$dir'"
        tfdocu_do $dir
    done

    if [[ -n "$(ls -A *.tf 2>/dev/null)" ]]; then
        dir="."
        echo "[Info] Running terraform-docs for '$dir'"
        tfdocu_do "$dir"
    fi
}

# @description: Check for secrets in current state and block commit, for secrets in commits only report them
function run_gitleaks() {
    ## skip setp if you add an empty file .skip_gitleaks
    if [[ -f "./.skip_gitleaks" ]]; then
        return
    fi
    if which gitleaks &>/dev/null ; then
        # The protect command is used to scan uncommitted changes in a git repo You can set the --staged flag to check for changes in commits that have been git added
        gitleaks protect --staged
    fi
}

if [[ -n "$(ls -A *.tf 2>/dev/null)" || -n "$(find .  -maxdepth 2 -not -path '*/.*' -not -path '.' -type f -name '*.tf')" ]]; then
    # we can disable docs creation
    if [ -z "$TF_DOCS_DISABLE" ]; then
        tfdocu
    fi
    # "skeletons" will not be checked
    if [[ "$(pwd)" == *"skeleton"* ]]; then
        echo "[Info] This looks like a 'skeleton', so plese manually run `terraform fmt`"
    else
        terraform fmt -recursive
    fi
fi

run_gitleaks
